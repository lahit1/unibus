#pragma once

#include <iostream>
#include <memory>
#include <unibus/radixtrie>

namespace unibus {

class T : std::enable_shared_from_this<T> {
	std::shared_ptr<std::istream> in;
	std::shared_ptr<std::ostream> out;

	T(); // hide

	Radix::N rad_root;

public:
	static std::shared_ptr<T> mk();
	static std::shared_ptr<T> mk(std::shared_ptr<std::istream> in, std::shared_ptr<std::ostream> out);

	std::shared_ptr<T> use(std::istream in);
	std::shared_ptr<T> use(std::ostream out);

	void use(const std::initializer_list<char> &header, bool (*worker_func)(Req &req, Res &res));
};

}
